import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from config import BOT_TOKEN, DOMAIN, DOMAIN_TEST
from form_handler import handle_form_res_command

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ú–µ–Ω—é",
                    callback_data="menu"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                    web_app=types.WebAppInfo(url=f"{DOMAIN}/consultations/?id=4e08b859-f884-40ea-b3fe-636f0b7e6bb2")
                )
            ],
            [
                InlineKeyboardButton(
                    text="–°–ø–æ—Ä—Ç –∏ –ø–∏—Ç–∞–Ω–∏–µ",
                    web_app=types.WebAppInfo(url=f"{DOMAIN}/miniapp/sport-nutrition")
                )
            ]
        ]
    )
    return keyboard

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–æ–≤
def get_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞",
                    web_app=types.WebAppInfo(url=f"{DOMAIN}/miniapp/menu")
                ),
                InlineKeyboardButton(
                    text="–ú–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã",
                    web_app=types.WebAppInfo(url=f"{DOMAIN}/miniapp/clothing_store")
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ö–Ω–∏–∂–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω",
                    web_app=types.WebAppInfo(url=f"{DOMAIN}/miniapp/books_store")
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚Üê –ù–∞–∑–∞–¥",
                    callback_data="back_to_main"
                )
            ]
        ]
    )
    return keyboard

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def get_test_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ú–µ–Ω—é —Ç–µ—Å—Ç–æ–≤–æ–µ",
                    web_app=types.WebAppInfo(url=f"{DOMAIN_TEST}/miniapp/menu")
                )
            ]
        ]
    )
    return keyboard

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è cust_dev
def get_cust_dev_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É",
                    web_app=types.WebAppInfo(url=f"{DOMAIN_TEST}/miniapp/cust_dev")
                )
            ]
        ]
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–º–∞–Ω–¥–µ
    command_args = message.text.split()
    
    if len(command_args) > 1 and command_args[1] == "cust_dev":
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è cust_dev
        welcome_text = """üëã –ú—ã –∫–æ–º–∞–Ω–¥–∞ Upmini.app ‚Äî —Å–æ–∑–¥–∞—ë–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ Telegram —Å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞.
–ù–∞–º –≤–∞–∂–Ω–æ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —ç–∫–æ–Ω–æ–º–∏—Ç –≤—Ä–µ–º—è –∏ –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å.

–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª—å—à–µ 5‚Äì7 –º–∏–Ω—É—Ç.

–ü–æ –∏—Ç–æ–≥–∞–º ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç —Ä–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∏ –≥–æ—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–¥ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏."""
        
        await message.answer(
            text=welcome_text,
            reply_markup=get_cust_dev_keyboard()
        )
    else:
        # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = "–î–µ–º–æ-–±–æ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ Telegram –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –æ—Ç –∫–æ–º–∞–Ω–¥—ã Upmini.app"
        
        await message.answer(
            text=welcome_text,
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test
@dp.message(Command("test"))
async def cmd_start(message: types.Message):
    welcome_text = "–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–º–æ-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"

    await message.answer(
        text=welcome_text,
        reply_markup=get_test_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /form_res
@dp.message(Command("form_res"))
async def cmd_form_res(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /form_res –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —Ñ–æ—Ä–º—ã"""
    await handle_form_res_command(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
@dp.callback_query(lambda c: c.data == "menu")
async def process_menu_callback(callback_query: CallbackQuery):
    await callback_query.answer()
    await callback_query.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:",
        reply_markup=get_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(lambda c: c.data == "back_to_main")
async def process_back_callback(callback_query: CallbackQuery):
    await callback_query.answer()
    await callback_query.message.edit_text(
        text="–î–µ–º–æ-–±–æ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–º–∏–Ω–∏ –∞–ø–ø",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def echo_message(message: types.Message):
    await message.answer(
        text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º",
        reply_markup=get_main_keyboard()
    )

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 